# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "gonasi"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler] 
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = [
  './migrations/20240619123002_extensions.sql',

  './schemas/update_updated_at_column.sql',

  './schemas/enums/course_access.sql',

  # profiles
  './schemas/profiles_schema_and_indexes.sql', 
  './schemas/profiles_triggers.sql',

  # user roles
  './schemas/app_permission_and_app_role_enums.sql',
  './schemas/user_roles_schema.sql',
  './schemas/user_roles_schema_rls_policies.sql',

  # permissions
  './schemas/role_permissions_schema.sql',
  './schemas/role_permissions_rls.sql',

  # # populate profiles when new user signs up
  './schemas/handle_new_user_trigger.sql',

  # # check if user has permissions
  './schemas/authorize_function.sql',

  # tier limits
  './schemas/tier_limits_schema_and_indexes.sql',

  # # course categories, sub categories rls etc
  './schemas/course_categories_and_sub_categories.sql',

  './schemas/pricing/utils/payment_frequency.sql',
  './schemas/pricing/utils/currency_code.sql',

  # organizations

  './schemas/organizations/utils/create_organization_wallets.sql',

  './schemas/organizations/organizations_schema_and_indexes.sql',

  # gonasi wallets
  './schemas/gonasiWallets/gonasi_wallets_schema_indexes.sql',
  './schemas/gonasiWallets/gonasi_wallets_rls.sql',

  # members schema
  './schemas/organizations/organization_members_schema_indexes.sql',
  
  './schemas/organizations/organization_invites_schema_and_indexes.sql',


  # add modes profile migration
  './schemas/profiles_add_modes_migration.sql',

  # profiles rls
  './schemas/profiles/profiles_schema_rls.sql',
  './schemas/profiles/profile_photos_storage_bucket_rls.sql',





  # members rls
  './schemas/organizations/organizations_functions_triggers.sql',


  './schemas/organizations/utils.sql',

  './schemas/organizations/organizations_rls.sql',
  './schemas/organizations/organization_members_rls.sql',
  './schemas/organizations/organization_invites_rls.sql',
  './schemas/organizations/function_fetch_active_org_members.sql',
  './schemas/organizations/function_accept_organization_invite.sql',

  './schemas/organizations/organization_profile_photos_bucket_rls.sql',
  './schemas/organizations/organization_profile_banner_bucket_rls.sql',



  # rpc profiles, orgs
  './schemas/get_tier_limits_for_org_functions.sql',
  './schemas/rpc_verify_and_set_active_organization.sql',




  # # courses & chapters & pricing
  './schemas/courses/courses_schema_and_indexes.sql',
  './schemas/courses/course_utils.sql',
  # './schemas/courses_course_collaborators_schema_indexes_triggers.sql',
  './schemas/courses/courses_schema_rls.sql',
  './schemas/chapters/chapters_schema_and_indexes.sql', # chapter
  './schemas/chapters/chapters_triggers.sql', # chapter
  './schemas/chapters/chapters_schema_rls.sql', # chapter
  
  './schemas/pricing/course_pricing_schema_and_indexes.sql', # pricing
  './schemas/pricing/course_pricing_triggers.sql', # pricing
  './schemas/pricing/course_pricing_schema_rls.sql', # pricing
  './schemas/pricing/course_pricing_automated_triggers_and_functions.sql', # pricing
  './schemas/pricing/course_pricing_rpc_reorder_delete.sql',

  # # lesson types
  './schemas/lesson_types_schema_and_rls.sql',

  # # lessons
  './schemas/lessons/lessons_schema_rls_and_triggers.sql',

  './schemas/blocks/lesson_blocks_schema_and_indexes.sql',
  './schemas/blocks/lesson_blocks_schema_rls.sql',
  './schemas/blocks/lesson_blocks_triggers_and_functions.sql',

  # './schemas/trigger_touch_course_updated_at_on_related_table_change.sql',

  './schemas/chapters/chapters_rpc_reorder_delete.sql',
  
  './schemas/lessons/lessons_rpc_reorder_delete.sql',
  './schemas/blocks/lesson_blocks_rpc_reorder_delete.sql',

  './schemas/fileLibrary/file_utils.sql',
  './schemas/fileLibrary/file_library_schema_indexes.sql',
  './schemas/fileLibrary/file_library_rls.sql',

  # # published
  './schemas/publishedCourses/published_courses_schema_and_indexes.sql',
  './schemas/publishedCourses/published_course_structure_content_schema_and_indexes.sql',


  './schemas/publishedCourses/utils/chk_pricing_tiers_valid_constraint.sql',
  './schemas/publishedCourses/utils/chk_course_structure_overview_valid_constraint.sql',
  './schemas/publishedCourses/utils/chk_course_structure_content_valid_constraint.sql',
  './schemas/publishedCourses/utils/get_published_lesson_blocks.sql',

  './schemas/publishedCourses/utils/queues/process_delete_course_progress.sql',
  './schemas/publishedCourses/utils/queues/enqueue_delete_course_progress.sql',

  './schemas/publishedCourses/utils/upsert_published_course_with_content.sql',
  './schemas/publishedCourses/utils/get_course_progress_overview.sql',

  # wallets
  './schemas/wallets/utils/transaction_status.sql',

  './schemas/wallets/org_wallets_schema_and_indexes.sql',
  './schemas/wallets/platform_wallets_schema_and_indexes.sql',
  './schemas/wallets/user_wallets_schema_and_indexes.sql',
  './schemas/wallets/wallet_ledger_entries_schema_and_indexes.sql',

  './schemas/wallets/utils/create_user_wallets.sql',
  './schemas/wallets/utils/create_org_wallets.sql',

  # enrollment related tables
  './schemas/enrollments/course_enrollments_schema_and_indexes.sql',
  './schemas/enrollments/course_enrollments_rls.sql',
  './schemas/enrollments/course_enrollment_activities_schema_indexes.sql',
  './schemas/enrollments/course_payments_schema_and_indexes.sql',
  './schemas/enrollments/course_payments_rls.sql',
  './schemas/enrollments/course_enrollment_activities_rls.sql',

  './schemas/publishedCourses/published_courses_rls.sql',
  './schemas/publishedCourses/published_course_structure_content_rls.sql',
  './schemas/publishedCourses/published_thumbnails_bucket_rls.sql',

  # gonasi wallet
  './schemas/gonasiWallets/gonasi_wallet_transactions_schema_indexes.sql',
  './schemas/gonasiWallets/gonasi_wallet_transactions_rls.sql',

      # org wallet
  './schemas/organizationWallets/organization_wallets_schema_indexes.sql',
  './schemas/organizationWallets/organization_wallets_rls.sql',
  './schemas/organizationWallets/wallet_transactions_schema_indexes.sql',
  './schemas/organizationWallets/wallet_transactions_rls.sql',

  # enrollments functions utils
  './schemas/enrollments/utils/calculate_access_end_date.sql',
  './schemas/enrollments/utils/get_published_course_pricing_tier.sql',
  './schemas/enrollments/utils/get_effective_pricing_for_published_tier.sql',
  './schemas/enrollments/utils/process_course_payment_to_wallets.sql',
  './schemas/enrollments/utils/enroll_user_in_published_course.sql',
  './schemas/enrollments/utils/user_has_active_access.sql',
  './schemas/enrollments/utils/get_enrollment_status.sql',

  './schemas/fileLibrary/published_file_library_schema_indexes.sql',
  './schemas/fileLibrary/published_file_library_rls.sql',
  './schemas/fileLibrary/published_files_bucket_rls.sql',


  # progress
  './schemas/progress/course_progress_schema_indexes.sql',
  './schemas/progress/course_progress_rls.sql',

  './schemas/progress/chapter_progress_schema_indexes.sql',
  './schemas/progress/chapter_progress_rls.sql',

  './schemas/progress/lesson_progress_schema_indexes.sql',
  './schemas/progress/lesson_progress_rls.sql',

  './schemas/progress/utils/increment_lesson_reset_count.sql',

  './schemas/progress/block_progress_schema_indexes.sql',
  './schemas/progress/block_progress_rls.sql',

  './schemas/progress/lesson_reset_count_schema_indexes.sql',
  './schemas/progress/lesson_reset_count_rls.sql',

  # Navigation Utils
  './schemas/progress/utils/navigation/get_unified_navigation.sql',
  './schemas/progress/utils/navigation/resolve_current_context.sql',
  './schemas/progress/utils/navigation/get_current_navigation_state.sql',
  './schemas/progress/utils/navigation/get_previous_navigation_state.sql',
  './schemas/progress/utils/navigation/get_next_navigation_state.sql',
  './schemas/progress/utils/navigation/get_continue_navigation_state.sql',
  './schemas/progress/utils/navigation/get_completion_navigation_state.sql',
  './schemas/progress/utils/navigation/get_course_navigation_info.sql',

  './schemas/progress/utils/get_user_lesson_blocks_progress.sql',
  './schemas/progress/utils/update_lesson_progress_for_user.sql',
  './schemas/progress/utils/update_chapter_progress_for_user.sql',
  './schemas/progress/utils/update_course_progress_for_user.sql',
  './schemas/progress/utils/complete_block.sql',

  # AI
  './schemas/ai/organizations_ai_credits_schema_and_indexes.sql',
  './schemas/ai/organizations_ai_credits_rls.sql',
  './schemas/ai/ai_usage_log_schema_and_indexes.sql',
  './schemas/ai/ai_usage_log_rls.sql',

  './schemas/ai/utils/handle_new_organization_ai_credits.sql',
  './schemas/ai/utils/reset_org_ai_base_credits_when_due.sql',




  # './schemas/enrollment_activities_schema_indexes_rls.sql',

  # './schemas/payments_schema_indexes_rls.sql',


  # rest
  # './schemas/*.sql' 
]

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = [
  './seeds/user_roles_and_permissions.sql',
  './seeds/course_categories_and_sub_categories.sql',
  './seeds/tier_limits.sql',
  # './seeds/lesson_types.sql'
]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:5173"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["http://localhost:5173"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
[auth.hook.custom_access_token]
enabled = true
uri = "pg-functions://postgres/public/custom_access_token_hook"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# google auth
# google auth
[auth.external.google]
enabled = true
client_id = "env(SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_EXTERNAL_GOOGLE_REDIRECT_URI)"
# Remove or comment out the skip_nonce_check line
# skip_nonce_check = true

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "per_worker"

# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/MY_FUNCTION_NAME/*.html" ]

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

[functions.send-invite-email]
enabled = true
verify_jwt = true
import_map = "./functions/send-invite-email/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/send-invite-email/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/send-invite-email/*.html" ]

[functions.initialize-paystack-transaction]
enabled = true
verify_jwt = true
import_map = "./functions/initialize-paystack-transaction/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/initialize-paystack-transaction/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/initialize-paystack-transaction/*.html" ]

[functions.paystack-create-subaccount]
enabled = true
verify_jwt = true
import_map = "./functions/paystack-create-subaccount/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/paystack-create-subaccount/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/paystack-create-subaccount/*.html" ]

[functions.paystack-fetch-bank-accounts]
enabled = true
verify_jwt = true
import_map = "./functions/paystack-fetch-bank-accounts/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/paystack-fetch-bank-accounts/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/paystack-fetch-bank-accounts/*.html" ]

[functions.generate-blurhash]
enabled = true
verify_jwt = true
import_map = "./functions/generate-blurhash/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/generate-blurhash/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/generate-blurhash/*.html" ]

[functions.send-org-invite]
enabled = true
verify_jwt = true
import_map = "./functions/send-org-invite/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
entrypoint = "./functions/send-org-invite/index.ts"
# Specifies static files to be bundled with the function. Supports glob patterns.
# For example, if you want to serve static HTML pages in your function:
# static_files = [ "./functions/send-org-invite/*.html" ]